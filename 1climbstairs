//Tabulation(space optimization)
#include <bits/stdc++.h> 
#define mod 1000000007

int helper(int n){
    if(n<=1) return 1;
    if(n==2) return 2;
    
    long long curr=0, prev=0, prev1=0;
    prev=2;
    prev1=1;
    
    for(int i=3;i<=n;i++){
        curr=(prev+prev1)%mod;
        prev1=prev;
        prev=curr;
    }
    return curr;   
}
int countDistinctWays(int nStairs) {
    //  Write your code here.
    int res=helper(nStairs);
    return res;
}



//Tabulation
/*#include <bits/stdc++.h> 
#define mod 1000000007
int countDistinct(long long nStairs){
    vector<int> dp(nStairs+1);

    dp[0]=1;
    dp[1]=1;
    dp[2]=2;
    for(int i=2;i<=nStairs;i++){
        dp[i]=(dp[i-1]+dp[i-2]) % mod;
    }
    return dp[nStairs];
}
int countDistinctWays(int nStairs) {
    //  Write your code here.
    int res=countDistinct(nStairs);
    return res;
}
*/

//Memoization
/*#include <bits/stdc++.h>
#define mod 1000000007
int helper(int n, vector<int>& dp){
    if(n<=1) return 1;
    if(n==2) return 2;
    
    if(dp[n]!=-1)   return dp[n];
    return dp[n]=(helper(n-1,dp)+helper(n-2,dp))%mod;
}
 
int countDistinctWays(int nStairs) {
    vector<int> dp(nStairs+1,-1);
    int res=helper(nStairs, dp);
    return res;
}
*/

//Brute force
/*#include <bits/stdc++.h> 
int countDistinctWays(int nStairs) {
    //  Write your code here.
    if(nStairs==1 ||nStairs==0)  return 1;
    else if(nStairs==2) return 2;
    
    return countDistinctWays(nStairs-1)+countDistinctWays(nStairs-2);
    
}*/


